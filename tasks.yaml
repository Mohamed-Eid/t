version: "1"

vars:
  BIN: "t"
  SRC: "."
  VERSION: "1.0.0"

tasks:
  # Independent tasks that can run in parallel
  format:
    desc: "Format code"
    cmds:
      - "go fmt ./..."
      - "Start-Sleep -Seconds 2"  # Simulate work

  vet:
    desc: "Vet code"
    cmds:
      - "go vet ./..."
      - "Start-Sleep -Seconds 2"  # Simulate work

  deps:
    desc: "Download dependencies"
    cmds:
      - "go mod download"
      - "Start-Sleep -Seconds 1"  # Simulate work

  # Tasks with dependencies that can run in parallel
  test:
    desc: "Run tests"
    deps: [format, vet]  # These will run in parallel
    cmds:
      - "go test ./..."

  build:
    desc: "Build the application"
    deps: [test, deps]  # test and deps can run in parallel
    cmds:
      - "New-Item -ItemType Directory -Force -Path bin"
      - "go build -ldflags=\"-s -w -X t/cmd.Version={{.VERSION}}\" -o bin/{{.BIN}}.exe {{.SRC}}"

  clean:
    desc: "Clean build artifacts"
    cmds:
      - "go clean"
      - "Remove-Item -Recurse -Force bin -ErrorAction SilentlyContinue"
      - "Remove-Item -Force t.exe -ErrorAction SilentlyContinue"
      - "Remove-Item -Force t -ErrorAction SilentlyContinue"

  dev:
    desc: "Run in development mode"
    cmds:
      - "go run ."

  install:
    desc: "Install dependencies"
    cmds:
      - "go mod download"
      - "go mod tidy"

  lint:
    desc: "Run linter and formatter"
    deps: [format, vet]  # These will run in parallel
    cmds:
      - "echo Linting completed"

  release:
    desc: "Build optimized release binary"
    deps: [test, lint]  # test and lint will run in parallel
    cmds:
      - "New-Item -ItemType Directory -Force -Path dist"
      - "go build -ldflags=\"-s -w -X t/cmd.Version={{.VERSION}}\" -o dist/{{.BIN}}.exe {{.SRC}}"

  # Demo task to show parallel execution
  parallel-demo:
    desc: "Demonstrate parallel execution"
    deps: [format, vet, deps]  # All three will run in parallel
    cmds:
      - "echo All parallel dependencies completed!"

  # Development server simulation
  serve:
    desc: "Start development server (simulated)"
    cmds:
      - "echo Starting development server..."
      - "echo Server running on http://localhost:8000"
      - "powershell -Command \"for(;;) { Write-Host ('[' + (Get-Date -Format 'HH:mm:ss') + '] Server is running...'); Start-Sleep -Seconds 5 }\""

  # File watcher simulation  
  watch:
    desc: "Watch files for changes (simulated)"
    cmds:
      - "echo Starting file watcher..."
      - "powershell -Command \"for(;;) { Write-Host ('[' + (Get-Date -Format 'HH:mm:ss') + '] Watching for file changes...'); Start-Sleep -Seconds 3 }\""

  # Simple long running task for testing
  long-task:
    desc: "Simple long running task for testing detach"
    cmds:
      - 'powershell -Command "1..100 | ForEach-Object { Write-Host ''Processing item'' $_; Start-Sleep -Seconds 2 }"'

  # Interactive tasks examples
  echo:
    desc: "Echo a message with user input"
    interactive:
      message:
        message: "Enter the message to echo"
        required: true
    cmds:
      - "echo $message"

  greet:
    desc: "Greet someone with custom name and greeting"
    interactive:
      name:
        message: "Enter your name"
        required: true
      greeting:
        message: "Enter greeting"
        default: "Hello"
        required: false
    cmds:
      - "echo $greeting $name!"

  commit:
    desc: "Git commit with interactive message"
    interactive:
      message:
        message: "Enter commit message"
        required: true
      files:
        message: "Enter files to add (or leave empty for all)"
        default: "."
        required: false
    cmds:
      - "git add $files"
      - "git commit -m \"$message\""

  deploy:
    desc: "Deploy to environment with confirmation"
    interactive:
      environment:
        message: "Enter target environment (dev/staging/prod)"
        default: "dev"
        required: true
      confirm:
        message: "Are you sure you want to deploy? (yes/no)"
        required: true
    cmds:
      - "echo Deploying to $environment..."
      - 'powershell -Command "if (\"$confirm\" -eq \"yes\") { Write-Host \"Deployment started to $environment\" } else { Write-Host \"Deployment cancelled\"; exit 1 }"'